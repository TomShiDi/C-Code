
#include<iostream>
#include<stdio.h>
#include<string>
#include<string.h>
using namespace std;
int M=0;
int Mid;
string temp1,temp2;
typedef struct T
{
	char data[25];
	struct T *R,*L;
}*PTree;



void list(PTree &t,char input[])
{
    int i;
	
	if(M!=0)
	{
		for(i=0;i<20;i++) input[i]=0;
		scanf("%s",input);
	}
	if(input[0]=='#') t=NULL;
	else
	{
		M++;
		t=new struct T;
		for(i=0;i<25;i++) t->data[i]=0;
		strcpy(t->data,input);
		list(t->L,input);
		list(t->R,input);
	}
}





int Out2(struct T *t,int n)
{
	if(t==NULL) return 1;
	else
	{
		if(t->L==NULL&&t->R==NULL&&n==0) temp2.append(t->data);
		else
		{
			Out2(t->L,n+1);
			temp2.append(t->data);
			Out2(t->R,n+1);
			/*if(n!=0)
			{
				temp2.insert(0,"(");
				temp2.insert(temp2.size(),")");
			}*/
			//cout<<temp2<<endl;
		}
		
	}
	return 1;
}

int Out(struct T *t,int n)
{
	if(t==NULL) return 1;
	else
	{
		if(t->L==NULL&&t->R==NULL&&n==0) temp1.append(t->data);
		else
		{
			Out(t->L,n+1);
			temp1.append(t->data);
			Out(t->R,n+1);
			/*if(n!=0)
			{
				temp1.insert(0,"(");
				temp1.insert(temp1.size(),")");
			}*/
			//cout<<temp1<<endl;
		}
		
	}
	return 1;
}



int main()
{
    PTree tree;
	char input[255];
	int i=0;
	
	while(scanf("%s",input)!=-1)
	{
		//l=1;r=1;
		temp1.assign("");
		temp2.assign("");
		M=0;
		list(tree,input);
		Out(tree->L,0);
		Out2(tree->R,0);
		temp1.append(tree->data).append(temp2).insert(0,"(").append(")");
		cout<<temp1<<endl;
	}
	return 0;
}

